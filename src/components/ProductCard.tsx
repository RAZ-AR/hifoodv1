import React, { useState } from 'react';
import { MenuItem } from '@/types';

interface ProductCardProps {
  item: MenuItem;
  onAddToCart?: (item: MenuItem) => void;
  onFavoriteToggle?: (item: MenuItem) => void;
  isFavorite?: boolean;
}

/**
 * –ö–ê–†–¢–û–ß–ö–ê –¢–û–í–ê–†–ê
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
 * - –§–æ—Ç–æ –±–ª—é–¥–∞
 * - –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
 * - –¶–µ–Ω—É
 * - –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
 * - –ö–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
 * - –ö–Ω–æ–ø–∫—É "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
 * - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
const ProductCard: React.FC<ProductCardProps> = ({
  item,
  onAddToCart,
  onFavoriteToggle,
  isFavorite = false
}) => {
  const [isAdding, setIsAdding] = useState(false);

  const handleAddToCart = () => {
    if (onAddToCart && item.available) {
      setIsAdding(true);
      onAddToCart(item);

      // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 300ms
      setTimeout(() => {
        setIsAdding(false);
      }, 300);
    }
  };

  const handleFavoriteToggle = () => {
    if (onFavoriteToggle) {
      onFavoriteToggle(item);
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover-lift">
      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
      <div className="relative h-48 overflow-hidden">
        <img
          src={item.image_url}
          alt={item.name}
          className="w-full h-full object-cover"
          loading="lazy"
        />

        {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
        <button
          onClick={handleFavoriteToggle}
          className="absolute top-2 right-2 w-8 h-8 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-md hover:scale-110 transition-transform"
          aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        >
          <span className="text-lg">
            {isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
          </span>
        </button>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */}
        {!item.available && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <span className="text-white text-sm font-semibold px-3 py-1 bg-red-500 rounded-full">
              –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
            </span>
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ */}
      <div className="p-4">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
        <h3 className="text-lg font-bold tg-theme-text mb-1">
          {item.name}
        </h3>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <p className="text-sm tg-theme-hint mb-3 line-clamp-2">
          {item.description}
        </p>

        {/* –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è */}
        {item.preparation_time && (
          <div className="flex items-center gap-1 mb-3">
            <span className="text-xs">‚è±Ô∏è</span>
            <span className="text-xs tg-theme-hint">
              {item.preparation_time} –º–∏–Ω
            </span>
          </div>
        )}

        {/* –¶–µ–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∞ */}
        <div className="flex items-center justify-between">
          {/* –¶–µ–Ω–∞ */}
          <div className="flex items-baseline gap-1">
            <span className="text-xl font-bold text-primary-600">
              {item.price}
            </span>
            <span className="text-sm tg-theme-hint">‚ÇΩ</span>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" */}
          <button
            onClick={handleAddToCart}
            disabled={!item.available}
            className={`px-4 py-2 rounded-lg text-sm font-semibold transition-colors ${
              isAdding ? 'animate-add-to-cart' : ''
            } ${
              item.available
                ? 'bg-primary-500 text-white hover:bg-primary-600 active:bg-primary-700'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
          >
            {item.available ? (isAdding ? '‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ' : '+ –î–æ–±–∞–≤–∏—Ç—å') : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;
