import React, { useState } from 'react';
import { MenuItem } from '@/types';

interface ProductModalProps {
  item: MenuItem;
  onClose: () => void;
  onAddToCart: (item: MenuItem, quantity: number) => void;
  currentQuantity: number;
  isFavorite: boolean;
  onFavoriteToggle: (item: MenuItem) => void;
  relatedItems?: MenuItem[];
  onItemClick?: (item: MenuItem) => void;
}

/**
 * –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –° –î–ï–¢–ê–õ–Ø–ú–ò –ë–õ–Æ–î–ê
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
 * - –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
 * - –í–µ—Å –∏ –∫–∞–ª–æ—Ä–∏–∏
 * - –ê–ª–ª–µ—Ä–≥–µ–Ω—ã
 * - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
 * - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –±–ª—é–¥
 */
const ProductModal: React.FC<ProductModalProps> = ({
  item,
  onClose,
  onAddToCart,
  currentQuantity,
  isFavorite,
  onFavoriteToggle,
  relatedItems = [],
  onItemClick,
}) => {
  const [quantity, setQuantity] = useState(currentQuantity || 1);

  const handleAddToCart = () => {
    const quantityToAdd = quantity - currentQuantity;
    if (quantityToAdd > 0) {
      onAddToCart(item, quantityToAdd);
    }
  };

  const handleQuantityChange = (delta: number) => {
    const newQuantity = Math.max(1, quantity + delta);
    setQuantity(newQuantity);
  };

  const handleRelatedItemClick = (relatedItem: MenuItem) => {
    if (onItemClick) {
      onItemClick(relatedItem);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end justify-center z-50 animate-fade-in">
      <div className="bg-white dark:bg-gray-800 rounded-t-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto animate-slide-in-up">
        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        <div className="relative h-64 w-full">
          <img
            src={item.image_url}
            alt={item.name}
            className="w-full h-full object-cover"
          />

          {/* –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
          <button
            onClick={onClose}
            className="absolute top-4 right-4 w-10 h-10 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-lg hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <span className="text-2xl">√ó</span>
          </button>

          <button
            onClick={() => onFavoriteToggle(item)}
            className="absolute top-4 left-4 w-10 h-10 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-lg hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <span className="text-2xl">{isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}</span>
          </button>

          {/* –°–∫–∏–¥–∫–∞ */}
          {item.discount && item.discount > 0 && (
            <div className="absolute top-4 right-16 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold shadow-lg">
              -{item.discount}%
            </div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ */}
        <div className="p-6">
          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          {item.sub_category && (
            <span className="inline-block px-3 py-1 bg-primary-100 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400 rounded-full text-xs font-medium mb-3">
              {item.sub_category}
            </span>
          )}

          {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
          <h2 className="text-2xl font-bold tg-theme-text mb-2">{item.name}</h2>

          {/* –í–µ—Å –∏ –∫–∞–ª–æ—Ä–∏–∏ */}
          <div className="flex items-center gap-4 mb-4">
            {item.weight && (
              <div className="flex items-center gap-1 text-sm tg-theme-hint">
                <span>‚öñÔ∏è</span>
                <span>{item.weight}</span>
              </div>
            )}
            {item.calories && (
              <div className="flex items-center gap-1 text-sm tg-theme-hint">
                <span>üî•</span>
                <span>{item.calories} –∫–∫–∞–ª</span>
              </div>
            )}
            {item.preparation_time && (
              <div className="flex items-center gap-1 text-sm tg-theme-hint">
                <span>‚è±Ô∏è</span>
                <span>{item.preparation_time} –º–∏–Ω</span>
              </div>
            )}
          </div>

          {/* –†–µ–π—Ç–∏–Ω–≥ */}
          {item.rating && (
            <div className="flex items-center gap-1 mb-4">
              <span className="text-yellow-500">‚≠ê</span>
              <span className="text-sm font-medium tg-theme-text">{item.rating.toFixed(1)}</span>
            </div>
          )}

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <p className="tg-theme-text text-base leading-relaxed mb-6">{item.description}</p>

          {/* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã */}
          {item.ingredients && item.ingredients.length > 0 && (
            <div className="mb-6">
              <h3 className="text-sm font-semibold tg-theme-text mb-2">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</h3>
              <div className="flex flex-wrap gap-2">
                {item.ingredients.map((ingredient, index) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-gray-100 dark:bg-gray-700 rounded-full text-sm tg-theme-text"
                  >
                    {ingredient}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* –ê–ª–ª–µ—Ä–≥–µ–Ω—ã */}
          {item.allergens && item.allergens.length > 0 && (
            <div className="mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
              <h3 className="text-sm font-semibold text-yellow-800 dark:text-yellow-400 mb-2">
                ‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–µ–Ω—ã:
              </h3>
              <p className="text-sm text-yellow-700 dark:text-yellow-300">
                {item.allergens.join(', ')}
              </p>
            </div>
          )}

          {/* –¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
          <div className="flex items-center justify-between mb-6">
            <div>
              <div className="text-2xl font-bold text-primary-600">
                {item.discount && item.discount > 0 ? (
                  <>
                    <span className="line-through text-gray-400 text-lg mr-2">{item.price} RSD</span>
                    <span>{Math.round(item.price * (1 - item.discount / 100))} RSD</span>
                  </>
                ) : (
                  <span>{item.price} RSD</span>
                )}
              </div>
            </div>

            {/* –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */}
            <div className="flex items-center gap-3">
              <button
                onClick={() => handleQuantityChange(-1)}
                disabled={quantity <= 1}
                className="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span className="text-xl font-bold">‚àí</span>
              </button>
              <span className="text-xl font-bold tg-theme-text min-w-[2rem] text-center">
                {quantity}
              </span>
              <button
                onClick={() => handleQuantityChange(1)}
                className="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600"
              >
                <span className="text-xl font-bold">+</span>
              </button>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É */}
          <button
            onClick={handleAddToCart}
            disabled={!item.available || quantity === currentQuantity}
            className="w-full py-4 bg-primary-500 text-white rounded-xl font-semibold text-lg hover:bg-primary-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
          >
            {!item.available
              ? '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
              : currentQuantity > 0 && quantity === currentQuantity
              ? '–£–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ'
              : currentQuantity > 0
              ? `–û–±–Ω–æ–≤–∏—Ç—å (${quantity} —à—Ç)`
              : `–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Äî ${item.discount ? Math.round(item.price * (1 - item.discount / 100) * quantity) : item.price * quantity} RSD`}
          </button>

          {/* –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ */}
          {relatedItems.length > 0 && (
            <div className="mt-8">
              <h3 className="text-lg font-bold tg-theme-text mb-4">–í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:</h3>
              <div className="grid grid-cols-2 gap-4">
                {relatedItems.slice(0, 4).map((relatedItem) => (
                  <div
                    key={relatedItem.id}
                    onClick={() => handleRelatedItemClick(relatedItem)}
                    className="cursor-pointer bg-gray-50 dark:bg-gray-700 rounded-lg overflow-hidden hover:shadow-lg transition-shadow"
                  >
                    <img
                      src={relatedItem.image_url}
                      alt={relatedItem.name}
                      className="w-full h-32 object-cover"
                    />
                    <div className="p-3">
                      <h4 className="text-sm font-semibold tg-theme-text mb-1 line-clamp-2">
                        {relatedItem.name}
                      </h4>
                      <p className="text-sm font-bold text-primary-600">{relatedItem.price} RSD</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductModal;
