import React, { useState } from 'react';

interface CheckoutFormProps {
  onSubmit: (data: CheckoutData) => void;
  onCancel: () => void;
  totalPrice: number;
}

export interface CheckoutData {
  name: string;
  street: string;
  building: string;
  apartment: string;
  code?: string;
  deliveryNote?: string;
  phone: string;
  paymentMethod: 'cash' | 'card';
  comment?: string;
}

/**
 * –§–û–†–ú–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê
 *
 * –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:
 * - –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
 * - –¢–µ–ª–µ—Ñ–æ–Ω
 * - –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
 * - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
 */
const CheckoutForm: React.FC<CheckoutFormProps> = ({ onSubmit, onCancel, totalPrice }) => {
  const [formData, setFormData] = useState<CheckoutData>({
    name: '',
    street: '',
    building: '',
    apartment: '',
    code: '',
    deliveryNote: '',
    phone: '',
    paymentMethod: 'cash',
    comment: '',
  });

  const [errors, setErrors] = useState<Partial<CheckoutData>>({});

  const validate = (): boolean => {
    const newErrors: Partial<CheckoutData> = {};

    if (!formData.name.trim()) {
      newErrors.name = '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    }

    if (!formData.street.trim()) {
      newErrors.street = '–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É';
    }

    if (!formData.building.trim()) {
      newErrors.building = '–£–∫–∞–∂–∏—Ç–µ –¥–æ–º';
    }

    if (!formData.apartment.trim()) {
      newErrors.apartment = '–£–∫–∞–∂–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É';
    }

    if (!formData.phone.trim()) {
      newErrors.phone = '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    } else if (!/^\+?[0-9]{10,15}$/.test(formData.phone.replace(/[\s-()]/g, ''))) {
      newErrors.phone = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (validate()) {
      onSubmit(formData);
    }
  };

  const handleChange = (field: keyof CheckoutData, value: string) => {
    setFormData({ ...formData, [field]: value });
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors({ ...errors, [field]: undefined });
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end justify-center z-50 animate-fade-in">
      <div className="bg-white dark:bg-gray-800 rounded-t-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto animate-slide-in-up">
        <div className="sticky top-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4 flex items-center justify-between">
          <h2 className="text-xl font-bold tg-theme-text">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
          <button
            onClick={onCancel}
            className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <span className="text-2xl">√ó</span>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {/* –ò–º—è */}
          <div>
            <label className="block text-sm font-medium tg-theme-text mb-2">
              –í–∞—à–µ –∏–º—è <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω"
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.name
                  ? 'border-red-500'
                  : 'border-gray-300 dark:border-gray-600'
              } bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500`}
            />
            {errors.name && (
              <p className="text-red-500 text-sm mt-1">{errors.name}</p>
            )}
          </div>

          {/* –£–ª–∏—Ü–∞ */}
          <div>
            <label className="block text-sm font-medium tg-theme-text mb-2">
              –£–ª–∏—Ü–∞ <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.street}
              onChange={(e) => handleChange('street', e.target.value)}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã"
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.street
                  ? 'border-red-500'
                  : 'border-gray-300 dark:border-gray-600'
              } bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500`}
            />
            {errors.street && (
              <p className="text-red-500 text-sm mt-1">{errors.street}</p>
            )}
          </div>

          {/* –î–æ–º –∏ –ö–≤–∞—Ä—Ç–∏—Ä–∞ */}
          <div className="grid grid-cols-2 gap-4">
            {/* –î–æ–º */}
            <div>
              <label className="block text-sm font-medium tg-theme-text mb-2">
                –î–æ–º <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.building}
                onChange={(e) => handleChange('building', e.target.value)}
                placeholder="‚Ññ"
                className={`w-full px-4 py-3 rounded-lg border ${
                  errors.building
                    ? 'border-red-500'
                    : 'border-gray-300 dark:border-gray-600'
                } bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500`}
              />
              {errors.building && (
                <p className="text-red-500 text-sm mt-1">{errors.building}</p>
              )}
            </div>

            {/* –ö–≤–∞—Ä—Ç–∏—Ä–∞ */}
            <div>
              <label className="block text-sm font-medium tg-theme-text mb-2">
                –ö–≤–∞—Ä—Ç–∏—Ä–∞ <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.apartment}
                onChange={(e) => handleChange('apartment', e.target.value)}
                placeholder="‚Ññ"
                className={`w-full px-4 py-3 rounded-lg border ${
                  errors.apartment
                    ? 'border-red-500'
                    : 'border-gray-300 dark:border-gray-600'
                } bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500`}
              />
              {errors.apartment && (
                <p className="text-red-500 text-sm mt-1">{errors.apartment}</p>
              )}
            </div>
          </div>

          {/* –ö–æ–¥ */}
          <div>
            <label className="block text-sm font-medium tg-theme-text mb-2">
              –ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞
            </label>
            <input
              type="text"
              value={formData.code}
              onChange={(e) => handleChange('code', e.target.value)}
              placeholder="–ö–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500"
            />
          </div>

          {/* –û—Ç–º–µ—Ç–∫–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ */}
          <div>
            <label className="block text-sm font-medium tg-theme-text mb-2">
              –û—Ç–º–µ—Ç–∫–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
            </label>
            <textarea
              value={formData.deliveryNote}
              onChange={(e) => handleChange('deliveryNote', e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –∑–∞ 5 –º–∏–Ω—É—Ç"
              rows={2}
              className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500"
            />
          </div>

          {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div>
            <label className="block text-sm font-medium tg-theme-text mb-2">
              –¢–µ–ª–µ—Ñ–æ–Ω <span className="text-red-500">*</span>
            </label>
            <input
              type="tel"
              value={formData.phone}
              onChange={(e) => handleChange('phone', e.target.value)}
              placeholder="+381 XX XXX XXXX"
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.phone
                  ? 'border-red-500'
                  : 'border-gray-300 dark:border-gray-600'
              } bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500`}
            />
            {errors.phone && (
              <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
            )}
          </div>

          {/* –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
          <div>
            <label className="block text-sm font-medium tg-theme-text mb-2">
              –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <span className="text-red-500">*</span>
            </label>
            <div className="grid grid-cols-2 gap-3">
              <button
                type="button"
                onClick={() => handleChange('paymentMethod', 'cash')}
                className={`px-4 py-3 rounded-lg border-2 transition-all ${
                  formData.paymentMethod === 'cash'
                    ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                    : 'border-gray-300 dark:border-gray-600'
                }`}
              >
                <div className="text-2xl mb-1">üíµ</div>
                <div className="text-sm font-medium tg-theme-text">–ù–∞–ª–∏—á–Ω—ã–µ</div>
              </button>

              <button
                type="button"
                onClick={() => handleChange('paymentMethod', 'card')}
                className={`px-4 py-3 rounded-lg border-2 transition-all ${
                  formData.paymentMethod === 'card'
                    ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                    : 'border-gray-300 dark:border-gray-600'
                }`}
              >
                <div className="text-2xl mb-1">üí≥</div>
                <div className="text-sm font-medium tg-theme-text">–ö–∞—Ä—Ç–æ–π</div>
              </button>
            </div>
          </div>

          {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
          <div>
            <label className="block text-sm font-medium tg-theme-text mb-2">
              –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
            </label>
            <textarea
              value={formData.comment}
              onChange={(e) => handleChange('comment', e.target.value)}
              placeholder="–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç.–¥."
              rows={3}
              className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 tg-theme-text focus:outline-none focus:ring-2 focus:ring-primary-500 resize-none"
            />
          </div>

          {/* –ò—Ç–æ–≥–æ */}
          <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
            <div className="flex justify-between items-center mb-2">
              <span className="tg-theme-hint">–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
              <span className="font-semibold tg-theme-text">{totalPrice} ‚ÇΩ</span>
            </div>
            <div className="flex justify-between items-center mb-2">
              <span className="tg-theme-hint">–î–æ—Å—Ç–∞–≤–∫–∞:</span>
              <span className="font-semibold text-green-600">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
            </div>
            <div className="border-t border-gray-300 dark:border-gray-600 pt-2 mt-2">
              <div className="flex justify-between items-center">
                <span className="text-lg font-bold tg-theme-text">–ò—Ç–æ–≥–æ:</span>
                <span className="text-2xl font-bold text-primary-600">{totalPrice} ‚ÇΩ</span>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={onCancel}
              className="flex-1 py-3 px-4 rounded-lg border border-gray-300 dark:border-gray-600 tg-theme-text hover:bg-gray-100 dark:hover:bg-gray-700 font-semibold"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="flex-1 py-3 px-4 rounded-lg bg-primary-500 text-white hover:bg-primary-600 font-semibold"
            >
              –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CheckoutForm;
