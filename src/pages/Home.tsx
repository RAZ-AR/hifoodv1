import React, { useState, useEffect } from 'react';
import { MenuItem } from '@/types';
import { api } from '@/services/api';
import ProductCard from '@/components/ProductCard';
import CategoryFilter from '@/components/CategoryFilter';
import AdBannerSlider from '@/components/AdBannerSlider';
import SkeletonCard from '@/components/SkeletonCard';
import SearchBar from '@/components/SearchBar';
import OrderStatusTracker from '@/components/OrderStatusTracker';
import { useCart } from '@/context/CartContext';
import { useFavorites } from '@/context/FavoritesContext';
import { useOrderTracking } from '@/hooks/useOrderTracking';
import { formatDishCount } from '@/utils/formatters';

/**
 * –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê (–ú–ï–ù–Æ)
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
 * - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥ –∏–∑ API
 * - –ó–∞–≥—Ä—É–∑–∫—É –∏ –æ—à–∏–±–∫–∏
 */
const Home: React.FC = () => {
  const { addToCart, getItemQuantity } = useCart();
  const { toggleFavorite, isFavorite } = useFavorites();
  const { orderId, orderStatus, clearOrder } = useOrderTracking();

  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [filteredItems, setFilteredItems] = useState<MenuItem[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('–í—Å–µ');
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –º–µ–Ω—é
  const categories = ['–í—Å–µ', ...Array.from(new Set(menuItems.map(item => item.category)))];

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadMenu();
  }, []);

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    let items = menuItems;

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (selectedCategory !== '–í—Å–µ') {
      items = items.filter(item => item.category === selectedCategory);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      items = items.filter(item =>
        item.name.toLowerCase().includes(query) ||
        item.description.toLowerCase().includes(query)
      );
    }

    setFilteredItems(items);
  }, [selectedCategory, searchQuery, menuItems]);

  const loadMenu = async () => {
    try {
      setLoading(true);
      setError(null);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ API
      const items = await api.getMenu({ available: true });
      setMenuItems(items);
      setFilteredItems(items);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setLoading(false);
    }
  };

  const handleCategoryChange = (category: string) => {
    setSelectedCategory(category);
  };

  const handleAddToCart = (item: MenuItem, quantityChange: number) => {
    addToCart(item, quantityChange);
  };

  const handleFavoriteToggle = (item: MenuItem) => {
    toggleFavorite(item.id);
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–∫–µ–ª–µ—Ç–æ–Ω–∞–º–∏
  if (loading) {
    return (
      <div className="pb-20">
        <CategoryFilter
          categories={['–í—Å–µ']}
          selectedCategory="–í—Å–µ"
          onCategoryChange={() => {}}
        />

        <div className="max-w-7xl mx-auto px-4 py-6">
          {/* –°–∫–µ–ª–µ—Ç–æ–Ω —Å–ª–∞–π–¥–µ—Ä–∞ */}
          <div className="mb-6">
            <div className="w-full h-48 skeleton rounded-lg"></div>
          </div>

          {/* –°–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
          <div className="mb-4">
            <div className="h-8 skeleton rounded w-40 mb-2"></div>
            <div className="h-4 skeleton rounded w-24"></div>
          </div>

          {/* –°–∫–µ–ª–µ—Ç–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫ */}
          <div className="grid grid-cols-2 gap-4">
            {[...Array(8)].map((_, index) => (
              <SkeletonCard key={index} />
            ))}
          </div>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center px-4">
        <div className="text-center">
          <span className="text-5xl mb-4 block">üòû</span>
          <h2 className="text-xl font-bold tg-theme-text mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p className="tg-theme-hint mb-4">{error}</p>
          <button
            onClick={loadMenu}
            className="px-6 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // –ü—É—Å—Ç–æ–µ –º–µ–Ω—é
  if (menuItems.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center px-4">
        <div className="text-center">
          <span className="text-5xl mb-4 block">üçΩÔ∏è</span>
          <h2 className="text-xl font-bold tg-theme-text mb-2">–ú–µ–Ω—é –ø—É—Å—Ç–æ</h2>
          <p className="tg-theme-hint">–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥</p>
        </div>
      </div>
    );
  }

  return (
    <div className="pb-20">
      {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
      <CategoryFilter
        categories={categories}
        selectedCategory={selectedCategory}
        onCategoryChange={handleCategoryChange}
      />

      {/* –°–ø–∏—Å–æ–∫ –±–ª—é–¥ */}
      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <div className="mb-6">
          <SearchBar
            value={searchQuery}
            onChange={setSearchQuery}
            placeholder="–ü–æ–∏—Å–∫ –±–ª—é–¥..."
          />
        </div>

        {/* –¢—Ä–µ–∫–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ */}
        {orderId && orderStatus && (
          <OrderStatusTracker
            orderId={orderId}
            status={orderStatus}
            onClose={clearOrder}
          />
        )}

        {/* –°–ª–∞–π–¥–µ—Ä —Å –±–∞–Ω–Ω–µ—Ä–∞–º–∏ */}
        <div className="mb-6">
          <AdBannerSlider />
        </div>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="mb-4">
          <h2 className="text-2xl font-bold tg-theme-text">
            {selectedCategory}
          </h2>
          <p className="text-sm tg-theme-hint mt-1">
            {formatDishCount(filteredItems.length)}
          </p>
        </div>

        {/* –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
        {filteredItems.length > 0 ? (
          <div className="grid grid-cols-2 gap-4 animate-stagger">
            {filteredItems.map((item) => (
              <ProductCard
                key={item.id}
                item={item}
                onAddToCart={handleAddToCart}
                onFavoriteToggle={handleFavoriteToggle}
                isFavorite={isFavorite(item.id)}
                currentQuantity={getItemQuantity(item.id)}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <span className="text-4xl mb-4 block">üîç</span>
            <p className="tg-theme-hint">
              –ù–µ—Ç –±–ª—é–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{selectedCategory}"
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;
