import React, { useState } from 'react';
import { useCart } from '@/context/CartContext';
import CheckoutForm, { CheckoutData } from '@/components/CheckoutForm';
import { generateOrderId, saveOrder } from '@/hooks/useOrderTracking';
import { formatOrderData } from '@/utils/orderMessage';
import { showTelegramAlert, triggerHaptic, getTelegramUser } from '@/utils/telegram';
import { formatItemCount } from '@/utils/formatters';
import { ORDER_CONFIG } from '@/constants';
import { api } from '@/services/api';

/**
 * –°–¢–†–ê–ù–ò–¶–ê –ö–û–†–ó–ò–ù–´
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
 * - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
 * - –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 * - –ò—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
 * - –ö–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
 */

interface CartProps {
  onNavigateHome?: () => void;
}

const Cart: React.FC<CartProps> = ({ onNavigateHome }) => {
  const { cartItems, updateQuantity, removeFromCart, getTotalPrice, clearCart } = useCart();
  const [showCheckoutForm, setShowCheckoutForm] = useState(false);
  const [isOrdering, setIsOrdering] = useState(false);
  const [cutleryCount, setCutleryCount] = useState<number>(ORDER_CONFIG.DEFAULT_CUTLERY_COUNT);

  const handleCheckoutClick = () => {
    setShowCheckoutForm(true);
  };

  const handleCheckoutSubmit = async (checkoutData: CheckoutData) => {
    setIsOrdering(true);

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
      const orderId = generateOrderId();
      const totalPrice = getTotalPrice();

      // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const telegramUser = getTelegramUser();
      const customerTelegramId = telegramUser?.id;

      console.log('üì± Telegram User:', telegramUser);
      console.log('üì± Customer Telegram ID:', customerTelegramId);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç–∞
      const orderData = formatOrderData({
        orderId,
        checkoutData,
        cartItems,
        cutleryCount,
        totalPrice,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ (–≤ –≥—Ä—É–ø–ø—É –∫—É—Ö–Ω–∏ + –∫–ª–∏–µ–Ω—Ç—É)
      const result = await api.sendOrderToTelegram(orderData.data, customerTelegramId);

      console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º orderId –≤ localStorage
      saveOrder(orderId, 'accepted');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      showTelegramAlert(
        'üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n' +
        `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}\n\n` +
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üçî\n' +
        '–°–∫–æ—Ä–æ –ø—Ä–∏–≤–µ–∑–µ–º –≤–∫—É—Å–Ω–æ—Å—Ç–∏! üöÄ\n\n' +
        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞.'
      );
      triggerHaptic('success');

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      clearCart();
      setShowCheckoutForm(false);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setTimeout(() => {
        if (onNavigateHome) {
          onNavigateHome();
        }
      }, 1500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);

      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      showTelegramAlert(
        '‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${errorMessage}\n\n` +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.'
      );
      triggerHaptic('error');
    } finally {
      setIsOrdering(false);
    }
  };

  // –ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞
  if (cartItems.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center px-4 pb-20">
        <div className="text-center">
          <span className="text-6xl mb-4 block">üõí</span>
          <h2 className="text-2xl font-bold tg-theme-text mb-2">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
          <p className="tg-theme-hint">–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é</p>
        </div>
      </div>
    );
  }

  return (
    <div className="pb-32">
      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-6">
          <h1 className="text-2xl font-bold tg-theme-text">–ö–æ—Ä–∑–∏–Ω–∞</h1>
          <p className="text-sm tg-theme-hint mt-1">
            {formatItemCount(cartItems.length)}
          </p>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
        <div className="space-y-4 mb-6">
          {cartItems.map(({ item, quantity }) => (
            <div
              key={item.id}
              className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4"
            >
              <div className="flex gap-4">
                {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <div className="w-20 h-20 flex-shrink-0 rounded-lg overflow-hidden">
                  <img
                    src={item.image_url}
                    alt={item.name}
                    className="w-full h-full object-cover"
                  />
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="flex-grow">
                  <h3 className="font-semibold tg-theme-text mb-1">{item.name}</h3>
                  <p className="text-sm tg-theme-hint mb-2">{item.category}</p>

                  <div className="flex items-center justify-between">
                    {/* –¶–µ–Ω–∞ */}
                    <div className="flex items-baseline gap-1">
                      <span className="text-lg font-bold text-primary-600">
                        {item.price * quantity}
                      </span>
                      <span className="text-xs tg-theme-hint">RSD</span>
                    </div>

                    {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => updateQuantity(item.id, quantity - 1)}
                        className="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center hover:bg-gray-300 dark:hover:bg-gray-600"
                      >
                        <span className="text-lg font-bold">‚àí</span>
                      </button>

                      <span className="w-8 text-center font-semibold tg-theme-text">
                        {quantity}
                      </span>

                      <button
                        onClick={() => updateQuantity(item.id, quantity + 1)}
                        className="w-8 h-8 bg-primary-500 text-white rounded-full flex items-center justify-center hover:bg-primary-600"
                      >
                        <span className="text-lg font-bold">+</span>
                      </button>
                    </div>
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                <button
                  onClick={() => removeFromCart(item.id)}
                  className="flex-shrink-0 w-8 h-8 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-full flex items-center justify-center"
                  aria-label="–£–¥–∞–ª–∏—Ç—å"
                >
                  <span className="text-xl">üóëÔ∏è</span>
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É */}
        <button
          onClick={clearCart}
          className="w-full mb-4 py-2 text-red-500 text-sm font-medium hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
        >
          –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
        </button>
      </div>

      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É—Ç–µ—Ä —Å –∏—Ç–æ–≥–æ–º */}
      <div className="fixed bottom-16 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 p-4 safe-area-bottom">
        <div className="max-w-7xl mx-auto">
          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤ */}
          <div className="flex justify-between items-center mb-3 pb-3 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center gap-2">
              <span className="text-2xl">üç¥</span>
              <span className="text-sm font-medium tg-theme-text">–ü—Ä–∏–±–æ—Ä—ã</span>
            </div>
            <div className="flex items-center gap-3">
              <button
                onClick={() => setCutleryCount(Math.max(0, cutleryCount - 1))}
                className="w-8 h-8 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center hover:bg-gray-200 dark:hover:bg-gray-600 active:scale-95 transition-all"
              >
                <span className="text-lg font-bold text-gray-600 dark:text-gray-300">‚àí</span>
              </button>
              <span className="w-8 text-center font-bold tg-theme-text">{cutleryCount}</span>
              <button
                onClick={() => setCutleryCount(cutleryCount + 1)}
                className="w-8 h-8 bg-primary-500 text-white rounded-full flex items-center justify-center hover:bg-primary-600 active:scale-95 transition-all"
              >
                <span className="text-lg font-bold">+</span>
              </button>
            </div>
          </div>

          {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ */}
          <div className="flex justify-between items-center mb-4">
            <span className="text-lg font-semibold tg-theme-text">–ò—Ç–æ–≥–æ:</span>
            <div className="flex items-baseline gap-1">
              <span className="text-2xl font-bold text-primary-600">
                {getTotalPrice().toFixed(0)}
              </span>
              <span className="text-sm tg-theme-hint">RSD</span>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è */}
          <button
            onClick={handleCheckoutClick}
            disabled={isOrdering}
            className={`
              w-full py-3 rounded-lg font-semibold text-white transition-all
              ${isOrdering
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-primary-500 hover:bg-primary-600 active:bg-primary-700'
              }
            `}
          >
            {isOrdering ? (
              <span className="flex items-center justify-center gap-2">
                <span className="animate-spin">‚è≥</span>
                –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ...
              </span>
            ) : (
              '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
            )}
          </button>
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      {showCheckoutForm && (
        <CheckoutForm
          onSubmit={handleCheckoutSubmit}
          onCancel={() => setShowCheckoutForm(false)}
          totalPrice={getTotalPrice()}
        />
      )}
    </div>
  );
};

export default Cart;
