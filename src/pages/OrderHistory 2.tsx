import React, { useState, useEffect } from 'react';
import { Order } from '@/types';
import { api } from '@/services/api';

interface OrderHistoryProps {
  userId?: string;
}

/**
 * –°–¢–†–ê–ù–ò–¶–ê –ò–°–¢–û–†–ò–ò –ó–ê–ö–ê–ó–û–í
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
 * - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
 * - –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
 */
const OrderHistory: React.FC<OrderHistoryProps> = ({ userId = 'user_test_123' }) => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadOrders();
  }, [userId]);

  const loadOrders = async () => {
    try {
      setLoading(true);
      setError(null);

      const userOrders = await api.getUserOrders(userId);
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      const sortedOrders = userOrders.sort((a, b) =>
        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
      );
      setOrders(sortedOrders);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã');
    } finally {
      setLoading(false);
    }
  };

  const getStatusEmoji = (status: Order['status']) => {
    const statusMap: Record<Order['status'], string> = {
      pending: '‚è≥',
      confirmed: '‚úÖ',
      preparing: 'üë®‚Äçüç≥',
      on_way: 'üöó',
      delivered: 'üéâ',
      cancelled: '‚ùå',
    };
    return statusMap[status] || 'üìã';
  };

  const getStatusText = (status: Order['status']) => {
    const statusMap: Record<Order['status'], string> = {
      pending: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      confirmed: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      preparing: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      on_way: '–í –ø—É—Ç–∏',
      delivered: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      cancelled: '–û—Ç–º–µ–Ω–µ–Ω',
    };
    return statusMap[status] || status;
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center pb-20">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto mb-4"></div>
          <p className="tg-theme-hint">–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...</p>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center px-4 pb-20">
        <div className="text-center">
          <span className="text-5xl mb-4 block">üòû</span>
          <h2 className="text-xl font-bold tg-theme-text mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p className="tg-theme-hint mb-4">{error}</p>
          <button
            onClick={loadOrders}
            className="px-6 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
  if (orders.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center px-4 pb-20">
        <div className="text-center">
          <span className="text-6xl mb-4 block">üì¶</span>
          <h2 className="text-2xl font-bold tg-theme-text mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</h2>
          <p className="tg-theme-hint">–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
        </div>
      </div>
    );
  }

  return (
    <div className="pb-20">
      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-6">
          <h1 className="text-2xl font-bold tg-theme-text">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</h1>
          <p className="text-sm tg-theme-hint mt-1">
            –í—Å–µ–≥–æ {orders.length} {orders.length === 1 ? '–∑–∞–∫–∞–∑' : '–∑–∞–∫–∞–∑–æ–≤'}
          </p>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
        <div className="space-y-4">
          {orders.map((order) => (
            <div
              key={order.order_id}
              className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4"
            >
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞ */}
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="font-semibold tg-theme-text">
                    –ó–∞–∫–∞–∑ #{order.order_id.slice(0, 8)}
                  </h3>
                  <p className="text-xs tg-theme-hint mt-1">
                    {new Date(order.created_at).toLocaleString('ru-RU')}
                  </p>
                </div>

                {/* –°—Ç–∞—Ç—É—Å */}
                <div className="flex items-center gap-2 px-3 py-1 bg-gray-100 dark:bg-gray-700 rounded-full">
                  <span className="text-base">{getStatusEmoji(order.status)}</span>
                  <span className="text-xs font-medium tg-theme-text">
                    {getStatusText(order.status)}
                  </span>
                </div>
              </div>

              {/* –¢–æ–≤–∞—Ä—ã */}
              <div className="space-y-2 mb-4 pb-4 border-b border-gray-200 dark:border-gray-700">
                {order.items.map((item, index) => (
                  <div key={index} className="flex justify-between text-sm">
                    <span className="tg-theme-text">
                      {item.name} √ó {item.quantity}
                    </span>
                    <span className="font-medium tg-theme-text">
                      {item.price * item.quantity} ‚ÇΩ
                    </span>
                  </div>
                ))}
              </div>

              {/* –î–µ—Ç–∞–ª–∏ */}
              <div className="space-y-2">
                {/* –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ */}
                {order.delivery_address && (
                  <div className="flex items-start gap-2">
                    <span className="text-base">üìç</span>
                    <div className="flex-grow">
                      <p className="text-xs tg-theme-hint">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</p>
                      <p className="text-sm tg-theme-text">{order.delivery_address.street}, {order.delivery_address.building}</p>
                    </div>
                  </div>
                )}

                {/* –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
                <div className="flex items-start gap-2">
                  <span className="text-base">üí≥</span>
                  <div className="flex-grow">
                    <p className="text-xs tg-theme-hint">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</p>
                    <p className="text-sm tg-theme-text">
                      {order.payment_method.type === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'}
                    </p>
                  </div>
                </div>

                {/* –ò—Ç–æ–≥–æ */}
                <div className="flex items-center justify-between pt-2 border-t border-gray-200 dark:border-gray-700">
                  <span className="font-semibold tg-theme-text">–ò—Ç–æ–≥–æ:</span>
                  <div className="flex items-baseline gap-1">
                    <span className="text-xl font-bold text-primary-600">
                      {order.total_amount}
                    </span>
                    <span className="text-sm tg-theme-hint">‚ÇΩ</span>
                  </div>
                </div>

                {/* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã */}
                {order.bonus_applied > 0 && (
                  <div className="flex items-center justify-between text-sm">
                    <span className="tg-theme-hint">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</span>
                    <span className="text-primary-600 font-medium">
                      -{order.bonus_applied} ‚ÇΩ
                    </span>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default OrderHistory;
