/**
 * TELEGRAM BOT SERVICE
 *
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ Telegram:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∫—É—Ö–Ω–∏
 * - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç—É
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
 */

import TelegramBot from 'node-telegram-bot-api';

interface OrderData {
  orderId: string;
  items: Array<{
    id: string;
    name: string;
    price: number;
    quantity: number;
  }>;
  total: number;
  cutleryCount: number;
  name: string;
  street: string;
  building: string;
  apartment: string;
  code?: string;
  deliveryNote?: string;
  contactMethod: 'telegram' | 'phone';
  phone?: string;
  paymentMethod: 'cash' | 'card';
  changeFrom?: number;
  comment?: string;
  loyaltyCardNumber?: string;
}

class TelegramBotService {
  private bot: TelegramBot | null = null;
  private botToken: string;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';

    if (!this.botToken) {
      console.error('‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
      return;
    }

    this.initializeBot();
  }

  private initializeBot() {
    try {
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      this.bot = new TelegramBot(this.botToken, { polling: true });

      console.log('‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      this.setupCommands();

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
      this.setupCallbackHandlers();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  private setupCommands() {
    if (!this.bot) return;

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      this.bot?.sendMessage(
        chatId,
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Hi Food.\n\n' +
        '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–µ.'
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      this.bot?.sendMessage(
        chatId,
        'üìñ *–ü–æ–º–æ—â—å*\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n' +
        '/help - –ü–æ–º–æ—â—å\n' +
        '/status <–Ω–æ–º–µ—Ä> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n\n' +
        '–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.',
        { parse_mode: 'Markdown' }
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status
    this.bot.onText(/\/status (.+)/, (msg, match) => {
      const chatId = msg.chat.id;
      const orderId = match?.[1];

      if (orderId) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        this.bot?.sendMessage(
          chatId,
          `–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId}...`
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /chatid - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
    this.bot.onText(/\/chatid/, (msg) => {
      const chatId = msg.chat.id;
      const chatType = msg.chat.type;
      const chatTitle = msg.chat.title || '–õ–∏—á–Ω—ã–π —á–∞—Ç';

      this.bot?.sendMessage(
        chatId,
        `üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*\n\n` +
        `ID: \`${chatId}\`\n` +
        `–¢–∏–ø: ${chatType}\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${chatTitle}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ KITCHEN_GROUP_ID`,
        { parse_mode: 'Markdown' }
      );
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∫–Ω–æ–ø–æ–∫
   */
  private setupCallbackHandlers() {
    if (!this.bot) return;

    this.bot.on('callback_query', async (callbackQuery) => {
      const message = callbackQuery.message;
      const data = callbackQuery.data;

      if (!message || !data) return;

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: status:orderId:newStatus
      const [action, orderId, newStatus] = data.split(':');

      if (action === 'status' && orderId && newStatus) {
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
          await this.updateOrderStatus(orderId, newStatus);

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${this.getStatusLabel(newStatus)}`,
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          this.getStatusEmoji(newStatus);
          await this.bot?.editMessageReplyMarkup(
            { inline_keyboard: this.getStatusButtons(orderId, newStatus) },
            {
              chat_id: message.chat.id,
              message_id: message.message_id,
            }
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
          await this.notifyCustomerAboutStatusChange(orderId, newStatus);

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
          });
        }
      }
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
   */
  private formatOrderMessage(orderData: OrderData): string {
    const itemsList = orderData.items
      .map((item) => {
        const itemTotal = item.price * item.quantity;
        return `‚Ä¢ ${item.name} √ó ${item.quantity} = ${itemTotal} RSD`;
      })
      .join('\n');

    const deliveryAddress = [
      `–£–ª–∏—Ü–∞: ${orderData.street}`,
      `–î–æ–º: ${orderData.building}, –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${orderData.apartment}`,
      orderData.code ? `–ö–æ–¥: ${orderData.code}` : '',
      orderData.deliveryNote ? `–û—Ç–º–µ—Ç–∫–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞: ${orderData.deliveryNote}` : '',
    ]
      .filter(Boolean)
      .join('\n');

    const contactInfo =
      orderData.contactMethod === 'telegram'
        ? 'Telegram'
        : `–¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}`;

    let paymentInfo = '';
    if (orderData.paymentMethod === 'cash') {
      paymentInfo = '–ù–∞–ª–∏—á–Ω—ã–µ';
      if (orderData.changeFrom) {
        const change = orderData.changeFrom - orderData.total;
        paymentInfo += `\n–°–¥–∞—á–∞ —Å ${orderData.changeFrom} RSD (—Å–¥–∞—á–∞: ${change} RSD)`;
      } else {
        paymentInfo += '\n–°–¥–∞—á–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è';
      }
    } else {
      paymentInfo = '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞';
    }

    return `
üõí *–ù–û–í–´–ô –ó–ê–ö–ê–ó ${orderData.orderId}*

üë§ *–ò–º—è:* ${orderData.name}
${orderData.loyaltyCardNumber ? `üé´ *–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:* ${orderData.loyaltyCardNumber}` : ''}

üì¶ *–¢–æ–≤–∞—Ä—ã:*
${itemsList}

üç¥ *–ü—Ä–∏–±–æ—Ä—ã:* ${orderData.cutleryCount} —à—Ç.

üí∞ *–ò—Ç–æ–≥–æ:* ${orderData.total} RSD

üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*
${deliveryAddress}

üìû *–ö–æ–Ω—Ç–∞–∫—Ç:*
${contactInfo}

üí≥ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*
${paymentInfo}

${orderData.comment ? `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n${orderData.comment}` : ''}
    `.trim();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–∫–∞–∑–∞
   */
  private getStatusButtons(orderId: string, currentStatus: string): TelegramBot.InlineKeyboardButton[][] {
    const statuses = [
      { status: 'accepted', label: '‚úÖ –ü—Ä–∏–Ω—è—Ç', emoji: '‚úÖ' },
      { status: 'preparing', label: 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', emoji: 'üë®‚Äçüç≥' },
      { status: 'delivering', label: 'üõµ –í –ø—É—Ç–∏', emoji: 'üõµ' },
      { status: 'delivered', label: 'üéâ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', emoji: 'üéâ' },
    ];

    return [
      statuses.map((s) => ({
        text: currentStatus === s.status ? `${s.emoji} ${s.label}` : s.label,
        callback_data: `status:${orderId}:${s.status}`,
      })),
    ];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusEmoji(status: string): string {
    const emojis: Record<string, string> = {
      accepted: '‚úÖ',
      preparing: 'üë®‚Äçüç≥',
      delivering: 'üõµ',
      delivered: 'üéâ',
    };
    return emojis[status] || '‚ùì';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusLabel(status: string): string {
    const labels: Record<string, string> = {
      accepted: '–ü—Ä–∏–Ω—è—Ç',
      preparing: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      delivering: '–í –ø—É—Ç–∏',
      delivered: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    };
    return labels[status] || status;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ö–Ω–∏ –∏ –∫–ª–∏–µ–Ω—Ç—É
   */
  async sendOrder(orderData: OrderData, customerTelegramId?: number): Promise<void> {
    if (!this.bot) {
      throw new Error('Telegram Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∫—É—Ö–Ω–∏ (–ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /chatid –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ)
    const kitchenGroupId = process.env.KITCHEN_GROUP_ID || '-3233318512';

    const message = this.formatOrderMessage(orderData);

    try {
      // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∫—É—Ö–Ω–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await this.bot.sendMessage(kitchenGroupId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: this.getStatusButtons(orderData.orderId, 'accepted'),
        },
      });

      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderData.orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫—É—Ö–Ω–∏ (${kitchenGroupId})`);

      // 2. –î—É–±–ª–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å –µ–≥–æ Telegram ID)
      if (customerTelegramId) {
        try {
          await this.bot.sendMessage(customerTelegramId, message, {
            parse_mode: 'Markdown',
          });
          console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderData.orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É`);
        } catch (customerError: any) {
          console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É ${customerTelegramId}:`, customerError.message);
          console.warn('   (–ö–ª–∏–µ–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ)');
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ö–Ω–∏:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
   */
  private async updateOrderStatus(orderId: string, status: string): Promise<void> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–π –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∫ dataProvider
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId} -> ${status}`);

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    // await db.updateOrderStatus(orderId, status);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
   */
  private async notifyCustomerAboutStatusChange(
    orderId: string,
    newStatus: string
  ): Promise<void> {
    // TODO: –ü–æ–ª—É—á–∏—Ç—å Telegram ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î –ø–æ orderId
    // const order = await db.getOrderById(orderId);
    // if (order.customerTelegramId) {
    //   await this.sendStatusUpdate(order.customerTelegramId, orderId, newStatus);
    // }

    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å—Ç–∞—Ç—É—Å–µ ${orderId}: ${newStatus}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç—É
   */
  async sendStatusUpdate(
    customerTelegramId: number,
    orderId: string,
    status: string
  ): Promise<void> {
    if (!this.bot) return;

    const statusMessages: Record<string, string> = {
      accepted: '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –∫—É—Ö–Ω—é',
      preparing: 'üë®‚Äçüç≥ –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ –≥–æ—Ç–æ–≤—è—Ç –≤–∞—à –∑–∞–∫–∞–∑',
      delivering: 'üõµ –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º!',
      delivered: 'üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!',
    };

    const message = `
üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderId}*

${statusMessages[status] || '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω'}
    `.trim();

    try {
      await this.bot.sendMessage(customerTelegramId, message, {
        parse_mode: 'Markdown',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
export const telegramBot = new TelegramBotService();
